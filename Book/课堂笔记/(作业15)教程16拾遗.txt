《拾遗》
总结前15节课所遇内容。

-----------------------------
《赋值运算符》
……
int a;
……
a = 5;
赋值运算符的左边必须是一个lvalue(left value，左值)，变量名就是lvalue
若将一个非lvalue放在左边，将会这样报错：
error: lvalue required as left operand of assignment

那什么是lvalue呢？
详情见: https://fishc.com.cn/forum.php?mod=viewthread&tid=69833&highlight=lvalue

--------------------------------------------------------------------------------
《复合的赋值运算符》
a= a + 1 ⇿ a += 1

当然
a = a + 1  ⇿  a += 1
a = a - 2  ⇿  a -= 2
a = a * 3  ⇿  a *= 3
a = a / 4  ⇿  a /= 4
a = a % 5  ⇿  a %= 5
……             ……

------------------------------------------
《自增自减运算符》（增量减量运算符）
当我们需要对一个变量+1或-1时我们可以使用自增自减运算符。

例如：
i = i + 1  ⇿  i++ 或 ++i
i = i - 1  ⇿  i-- 或 --i

注：
1. [i++]与[++i]单独使用没有区别。
2. 但是作为表达式的话，前者是自增前的值 后者是自增后的值。
3. 且[++i]的运算等级小于[<](小于符号)。
4. i++ 不能作为左值，而++i 可以。
如：
int i = 0;
int *p1 = &（++i）；//正确
int *p2 = &（i++）；//错误
++i = 1；//正确
i++ = 1；//错误
5. 简单来说[i++]是先使用再加，[++i]是先加再使用

-----------------------------------------------
《逗号运算符》
“逗号运算符的，我们说for语句的表达式1和表达式2和表达式3可以通过使用逗号运算符，
来初始化多个值或者说调整多个循环变量来非常方便啊。
不过呢，我们也可以把他们当成单独拿出来使用啊，把这个逗号运算符单独拿出来使用。”——————小甲鱼

如：
……
i = 1;  ↘    ……
j = 2;   --→  i = 1, j = 2, k = 3;
k = 3;  ↗
……

·语法：表达式1, 表达式2, ……, 表达式n;
-逗号表达式的运算过程为从左往右逐个计算表达式。
-逗号表达式作为一个整体，它的值为最后一个表达式（也即是表达式n）的值。

例：
……            ……
a = 3, 5  ⇿  a = 3;
……            5;
              ……

因为赋值运算符[=]比逗号运算符[,]优先级高，所以要这样写。

· a = (b = 3, (c = b + 4) + 5)
-先将变量b赋值为3
-然后变量c赋值为b + 4的和，也就是7
-接下来把c的值加上5
-最后赋值给变量a，得到变量a的值是12。

注：某些情况下的逗号可为分隔符，如int i =5, j;

----------------------------------------------
《条件运算符》
这个很简单。
·语法：exp1 ? exp2 : exp3;
-exp1是条件表达式
-如果结果为真，返回exp2的值
-如果结果为假，返回exp3的值

像：
if (a > b)  ↘
    max = a;  ↘
else            →   max = a > b ? a : b
    max = b;  ↗

-----------------------------------------------------
《goto语句》

·语法：goto 标签；
↑实例在goto.c (好像手贱被删了)

注：我们在开发中请不要滥用goto语句(谨慎使用/不要使用)，
因为随意使用goto语句在代码里面跳来跳去会破坏代码原有的逻辑。

只有一种情况下使用goto语句是情有可原的：
只有当你要从很多层循环的最里面跳到最外面才可以使用goto语句。

-----------------------------------------------------
《注释》
很多情况下注释甚至比代码本身还重要。

写注释需要注意的是：
1.不要不写;
2.不要每一句都写上注释;
3.一定要写好复杂的变量;
4.最好在应用最上面写好程序的用途;

